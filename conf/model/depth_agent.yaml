_target_: agents.beso_agent.BesoAgent
_recursive_: false

defaults:
  - model: beso/beso_dec_xlstm
  - obs_encoders: conv_rgb
  - language_encoders: clip

if_film_condition: False
if_robot_states: False

#language_goal:
#  _target_: agents.mdt.models.networks.clip_lang_encoder.LangClip
#  # mdt.models.encoders.clip_tokens.LangClip
#  _recursive_: false
#
#  # device: ${device}
#  # pretrained_model: ${clip_lang_model_name}
#  model_name: ${clip_lang_model_name}
#  # 16 or 32 "RN101", "RN50x4", "RN50x16", "ViT-B/32", "ViT-B/16"

optimizer:
  _target_: torch.optim.AdamW
  transformer_weight_decay: 0.05
  obs_encoder_weight_decay: 0.05
  learning_rate: 1e-4
  betas: [0.9, 0.9]

lr_scheduler:
  lr_scheduler:
    init_lr: 1e-4  # This is the peak or maximum learning rate
    init_lr_scale: 0.1  # This is the ratio of initial learning rate to peak learning rate
    final_lr_scale: 1e-6  # This is the ratio of final learning rate to peak learning rate
    total_steps: 50000  # Example total steps, adjust as needed
    phase_ratio: "(0.02, 0.08, 0.9)"
    lr: 1e-4

latent_dim: ${latent_dim}
action_dim: ${action_dim}

obs_seq_len: ${obs_seq_len}
act_seq_len: ${act_seq_len}

decay: 0.995
use_lr_scheduler: False

# diffusion params
sampler_type: 'ddim'
num_sampling_steps: ${num_sampling_steps}
sigma_data: 0.5
sigma_min: 0.001
sigma_max: 80
noise_scheduler: 'exponential'
sigma_sample_density_type: 'loglogistic'

use_text_not_embedding: True
ckpt_path: null

cam_file: ${cam_file}